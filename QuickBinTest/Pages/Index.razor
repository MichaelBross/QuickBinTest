@page "/"
@using System.Text
@using System.Xml
@using System.Net.Sockets
@using System.Text.Encodings
@using QuickBinTest.Data

@inject NavigationManager navigationManager

<h1>QUICK BIN TEST APP</h1>
<br />

<form>
    <div class="row">
        <div class="col-2" style="max-width: 120px;">
            <button type="button" class="btn btn-primary" @onclick="HandleConnectButtonClick" style="width: 105px;">CONNECT</button>
        </div>
        <div class="col-md-4">
            <div class="input-group mb-3">
                <span class="input-group-text">IP ADDRESS</span>
                <input type="text" class="form-control" @bind-value="QuickBin.QuickBinIpAddress">
            </div>
        </div>
        <div class="col-md-2">
            <div class="input-group mb-3">
                <span class="input-group-text">PORT</span>
                <input type="text" class="form-control" @bind-value="QuickBin.QuickBinSocketPort">
            </div>
        </div>
        <div class="col-3" style="max-width: 120px;">
            <button type="button" class="btn btn-primary" @onclick="HandleDisconnectButtonClick">DISCONNECT</button>
        </div>
    </div>
    <br />
    <div class="row g-3">
        <div class="col-2" style="max-width: 120px;">
            <button type="button" class="btn btn-primary" @onclick="HandleSendCommandButtonClick" style="width: 105px;">SEND</button>
        </div>
        <div class="col-10">
            <div class="input-group mb-3">
                <span class="input-group-text">COMMAND</span>
                <input type="text" class="form-control" @bind-value="CommandToSend">
            </div>
        </div>
    </div>
    <br />
    <div class="input-group mb-3">
        <span class="input-group-text">LINE 1</span>
        <input type="text" class="form-control" @bind-value="QuickBin.Line1">
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text">LINE 2</span>
        <input type="text" class="form-control" @bind-value="QuickBin.Line2">
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text">LINE 3</span>
        <input type="text" class="form-control" @bind-value="QuickBin.Line3">
    </div>
    <div class="row">
        <div class="col-2">
            <button type="button" class="btn btn-primary" @onclick="QuickBin.SendLines" style="width: 125px;">DRAW LINES</button>
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-primary" @onclick="QuickBin.GetReading" style="width: 140px;">GET READING</button>
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-primary" @onclick="HandleTareButtonClick" style="width: 125px;">TARE</button>
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-primary" @onclick="HandleCalibrateButtonClick" style="width: 125px;">CAL - @QuickBin.CalibrationWeightGrams</button>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-3">
            <div class="input-group mb-3">
                <span class="input-group-text">RAW WEIGHT READING</span>
                <input type="number" class="form-control" @bind-value="QuickBin.RawWeightReading">
            </div>
        </div>
        <div class="col-3">
            <div class="input-group mb-3">
                <span class="input-group-text">OFFSET</span>
                <input type="number" class="form-control" @bind-value="QuickBin.X0">
            </div>
        </div>
        <div class="col-3">
            <div class="input-group mb-3">
                <span class="input-group-text">CALIBRATION VALUE</span>
                <input type="number" class="form-control" @bind-value="QuickBin.CalibrationWeightGrams">
            </div>
        </div>
        <div class="col-3">
            <div class="input-group mb-3">
                <span class="input-group-text">@(QuickBin.CalibrationWeightGrams)g READING</span>
                <input type="number" class="form-control" @bind-value="QuickBin.X1">
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-4">
            <div class="input-group mb-3">
                <span class="input-group-text">WEIGHT IN GRAMS</span>
                <input type="number" class="form-control" value="@QuickBin.WeightInGrams">
            </div>
        </div>        
    </div>

    <div class="row">
        <div class="col-2">
            EVENTS
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-sm btn-primary" @onclick="HandleClearEventsButtonClick" style="width: 180px;">CLEAR EVENTS</button>
        </div>
    </div>

    <div class="mb-3">
        @foreach (var _event in QuickBin.Activity)
        {
            <div class="mb-3">
                @_event
            </div>
        }
    </div>
    <div class="row">
        <div class="col-2">
            MESSAGES
        </div>
        <div class="col-2">
            <button type="button" class="btn btn-sm btn-primary" @onclick="HandleClearMessagesButtonClick" style="width: 180px;">CLEAR MESSAGES</button>
        </div>
    </div>
    <div class="mb-3">
        @foreach (var message in QuickBin.RecivedMessages)
        {
            <div class="mb-3">
                @message
            </div>
        }
    </div>
</form>


@code{

    public QuickBin QuickBin { get; set; }

    public string CommandToSend { get; set; }

    public Socket sck;

    protected override async Task OnInitializedAsync()
    {
        QuickBin = new QuickBin();
        QuickBin.QuickBinIpAddress = "192.168.86.28";
        QuickBin.QuickBinSocketPort = 23;
        QuickBin.onMessageReceived += HandleMessageReceived;
        await base.OnInitializedAsync();

        QuickBin.IntializeSocket();
    }

    private async Task HandleConnectButtonClick()
    {
        await QuickBin.Connect();
        StateHasChanged();
    }

    private void HandleSendCommandButtonClick()
    {
        QuickBin.SendCommand(CommandToSend);
    }

    public async void HandleMessageReceived(object sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }

    public void HandleDisconnectButtonClick()
    {
        QuickBin.Disconnect();
    }

    public  void HandleClearEventsButtonClick()
    {
        QuickBin.Activity.Clear();
    }

    public void HandleClearMessagesButtonClick()
    {
        QuickBin.RecivedMessages.Clear();
    }

    public void HandleTareButtonClick()
    {
        int value = QuickBin.RawWeightReading;
        QuickBin.X0 = value;
    }

    public void HandleCalibrateButtonClick()
    {
        int value = QuickBin.RawWeightReading;
        QuickBin.X1 = value;
    }
}
