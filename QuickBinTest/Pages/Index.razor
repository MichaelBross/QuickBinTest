@page "/"
@using System.Text
@using System.Xml
@using System.Net.Sockets
@using System.Net.WebSockets
@using System.Text.Encodings
@using QuickBinTest.Data
@inject IQuickBinService QuickBinService
@inject NavigationManager navigationManager

<h1>QUICK BIN TEST APP</h1>
<br />

<form>
    <div class="mb-3">
        <button type="button" class="btn btn-primary" @onclick="TurnOnLED">LED ON</button>
        <button type="button" class="btn btn-primary" @onclick="TurnOffLED">LED OFF</button>
    </div>
    <div class="mb-3">
        <label for="messageinput" class="form-label">Line 1</label>
        <input type="text" class="form-control" id="messageinput" @bind-value="Line1">
    </div>
    <div class="mb-3">
        <label for="messageinput" class="form-label">Line 2</label>
        <input type="text" class="form-control" id="messageinput" @bind-value="Line2">
    </div>
    <div class="mb-3">
        <label for="messageinput" class="form-label">Line 3</label>
        <input type="text" class="form-control" id="messageinput" @bind-value="Line3">
    </div>
    <div class="mb-3">
        <button type="button" class="btn btn-primary" @onclick="SendLines">DRAW LINES</button>
    </div>
    <div class="mb-3">
        <label for="messageinput" class="form-label">Message</label>
        <input type="text" class="form-control" id="messageinput" @bind-value="MyModel.Message">
    </div>
    <div class="mb-3">
        <button type="button" class="btn btn-primary" @onclick="HandleSendMessageButtonClick">SEND MESSAGE</button>
    </div>
    <div class="mb-3">
        <label for="response" class="form-label">Response</label>
        <input type="text" class="form-control" id="response" @bind-value="MyModel.Response">
    </div>
    <div class="mb-3">
        <label for="response" class="form-label">Message</label>
        <input type="text" class="form-control" id="response" @bind-value="Message">
    </div>
    @foreach (var quickBin in QuickBins)
    {
        <div class="mb-3">
            @quickBin.Id  @quickBin.Message
        </div>
    }

<div class="mb-3">
    <button type="button" class="btn btn-primary" @onclick="btnConnect_Click">CONNECT</button>
    <button type="button" class="btn btn-primary" @onclick="btnSend_Click">SEND MESSAGE</button>
</div>
    <div class="mb-3">
        <label for="response" class="form-label">MESSAGE TO SEND</label>
        <input type="text" class="form-control" id="response" @bind-value="MessageToSend">
    </div>
    <div class="mb-3">
        MESSAGES
    </div>
    <div class="mb-3">
        @foreach (var message in Messages)
        {
            <div class="mb-3">
                @message
            </div>
        }
    </div>
</form>



@code{

    public Communication MyModel { get; set; } = new Communication();
    public string Line1 { get; set; }
    public string Line2 { get; set; }
    public string Line3 { get; set; }
    public string Message { get; set; }
    public List<string> Issues { get; set; }
    public List<string> Messages { get; set; } = new List<string>();
    public List<QuickBin> QuickBins { get; set; }
    public string UserName { get; set; } = "Mike";
    public string MessageToSend { get; set; }

    public Socket sck;

    protected override async Task OnInitializedAsync()
    {
        QuickBins = new List<QuickBin>();
        await base.OnInitializedAsync();

        string baseUrl = navigationManager.BaseUri;
        await QuickBinService.RegisterClient("kitting", baseUrl, Issues);
        QuickBinService.onMessageReceived += HandleQuickBinMessage;

        sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    }

    private void btnConnect_Click()
    {
        if (!sck.Connected)
        {
            sck = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

            sck.Connect("192.168.86.27", 23);
            if (sck.Connected)
                Messages.Add("YOU ARE NOW CONNECTED" + Environment.NewLine);

            sck.BeginReceive(new byte[] { 0 }, 0, 0, 0, callback, null);
            sck.Send(Encoding.UTF8.GetBytes($"Welcome {UserName}{Environment.NewLine}"));
        }
    }

    private void btnSend_Click()
    {
        var formattedMessage = UserName + ">>> " + MessageToSend + Environment.NewLine;
        sck.Send(Encoding.UTF8.GetBytes(formattedMessage));
    }

    void callback(IAsyncResult ar)
    {
        string msgHolder = null;

        try
        {
            if (sck.Available == 0)
            {
                Messages.Add("Socket not available");
            }

            sck.EndReceive(ar);

            byte[] buf = new byte[8192];

            int rec = sck.Receive(buf); //, buf.Length, 0);

            if (rec < buf.Length)
                Array.Resize<byte>(ref buf, rec);
            sck.BeginReceive(new byte[] { 0 }, 0, 0, 0, callback, null);

            Messages.Add(Encoding.UTF8.GetString(buf));
            InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Messages.Add($"callback failed: {ex.Message}");
        }

    }

    #region HTTP_METHOD

    public void HandleSendMessageButtonClick()
    {
        MyModel.Response = SendTcpMessage("192.168.86.27", 80, MyModel.Message);
    }

    public void HandleQuickBinMessage(object sender, QuickBin qb)
    {
        QuickBins.Add(qb);
        Message = qb.Message;
        InvokeAsync(() => StateHasChanged());
    }

    public void HandleCountchanged(object sender, QuickBin qb)
    {
        Message = qb.Message;
        InvokeAsync(StateHasChanged);
    }

    public string SendTcpMessage(string address, int port, string message)
    {
        var result = string.Empty;
        try
        {
            var httpClient = new HttpClient();
            var udpClient = new UdpClient();
            var webSocket = new ClientWebSocket();
            var client = new TcpClient(address, port);

            Byte[] data = System.Text.Encoding.ASCII.GetBytes($"{message} \n\n");

            NetworkStream stream = client.GetStream();

            stream.Write(data, 0, data.Length);

            var returnedData = new byte[256];

            // Read the first batch of the TcpServer response bytes.
            Int32 bytes = stream.Read(returnedData, 0, returnedData.Length);
            result = System.Text.Encoding.ASCII.GetString(returnedData, 0, bytes);

            // Close everything.
            stream.Close();
            client.Close();
        }
        catch (ArgumentNullException ex)
        {
            result = $"ArgumentNullException: {ex.Message}";
        }
        catch (SocketException ex)
        {
            result = $"SocketException: {ex.Message}";
        }

        return result;
    }

    public void TurnOnLED()
    {
        MyModel.Response = SendTcpMessage("192.168.86.27", 80, "LED ON");
    }

    public void TurnOffLED()
    {
        MyModel.Response = SendTcpMessage("192.168.86.27", 80, "LED OFF");
    }

    public class Communication
    {
        public string Message { get; set; }
        public string Response { get; set; }
    }

    public void SendLines()
    {
        var message = $"DRAW{Line1}^{Line2}^{Line3}";
        MyModel.Response = SendTcpMessage("192.168.86.27", 80, message);
    }

    #endregion



}
